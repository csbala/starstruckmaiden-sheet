// Sets up a render hook to add VE and CB bars to the sheet with a dreamy, starlit design
export function setupRenderHook() {
  Hooks.on("renderStarstruckMaidenSheet", async (sheet, html) => {
    console.log(
      `Starstruck Maiden Sheet opened for actor: ${sheet.actor.name}`
    );

    const actor = sheet.actor;
    const maxHP = actor.system.attributes.hp.max || 0;
    const maxVE = actor.system.resources?.vitalEnergy?.max || 0;
    const currentVE = actor.system.resources?.vitalEnergy?.value || 0;
    const maxCB = actor.system.resources?.celestialBurn?.max || 0;
    const currentCB = actor.system.resources?.celestialBurn?.value || 0;

    // Calculate the position of the HP marker on the VE bar
    const hpMarkerPosition = (maxHP / maxVE) * 100; // Percentage of VE bar where max HP ends

    // Create VE bar with dreamy, glowing design and HP marker
    const veBar = `
      <div class="resource-bar ve-bar" style="margin: 10px 0; position: relative;">
        <label style="width: 150px; display: inline-block; font-family: Georgia, serif; color: #FFD700; text-shadow: 0 0 5px #FFD700;">Vital Energy (VE):</label>
        <div class="bar-container" style="display: inline-block; width: 300px; height: 30px; background: linear-gradient(90deg, #DAA520, #FFFACD); border-radius: 15px; border: 2px solid #FFD700; position: relative; overflow: hidden; box-shadow: 0 0 10px #FFD700;">
          <div class="bar-fill" style="width: ${
            (currentVE / maxVE) * 100
          }%; height: 100%; background: linear-gradient(90deg, #FFD700, #FFFACD); animation: glow 2s infinite; position: relative;">
            <div class="starlight" style="width: 100%; height: 100%; background: repeating-linear-gradient(45deg, transparent, transparent 5px, rgba(255, 255, 255, 0.3) 5px, rgba(255, 255, 255, 0.3) 10px); opacity: 0.5;"></div>
          </div>
          <div class="hp-marker" style="position: absolute; left: ${hpMarkerPosition}%; top: 0; height: 100%; width: 2px; border-left: 2px dotted white; box-shadow: 0 0 5px white;"></div>
          <span style="position: absolute; top: 5px; left: 50%; transform: translateX(-50%); font-family: Georgia, serif; color: #333; text-shadow: 0 0 3px #FFD700;">${currentVE}/${maxVE}</span>
        </div>
        <span class="tooltip" style="margin-left: 5px; cursor: help;">ⓘ</span>
        <div class="tooltip-text" style="display: none; position: absolute; background: #333; color: white; padding: 5px; border-radius: 3px;">
          VE is your renewable health pool. Using VE reduces HP (min 25% of max HP) and generates CB.
        </div>
      </div>
    `;

    // Create CB bar with cosmic, starlit design
    const cbBar = `
      <div class="resource-bar cb-bar" style="margin: 10px 0; position: relative;">
        <label style="width: 150px; display: inline-block; font-family: Georgia, serif; color: #1E90FF; text-shadow: 0 0 5px #1E90FF;">Celestial Burn (CB):</label>
        <div class="bar-container" style="display: inline-block; width: 300px; height: 30px; background: linear-gradient(90deg, #4682B4, #87CEEB); border-radius: 15px; border: 2px solid #1E90FF; position: relative; overflow: hidden; box-shadow: 0 0 10px #1E90FF;">
          <div class="bar-fill" style="width: ${
            (currentCB / maxCB) * 100
          }%; height: 100%; background: linear-gradient(90deg, #1E90FF, #87CEEB); animation: twinkle 3s infinite; position: relative;">
            <div class="starlight" style="width: 100%; height: 100%; background: repeating-linear-gradient(45deg, transparent, transparent 5px, rgba(255, 255, 255, 0.3) 5px, rgba(255, 255, 255, 0.3) 10px); opacity: 0.5;"></div>
          </div>
          <span style="position: absolute; top: 5px; left: 50%; transform: translateX(-50%); font-family: Georgia, serif; color: #333; text-shadow: 0 0 3px #1E90FF;">${currentCB}/${maxCB}</span>
        </div>
        <span class="tooltip" style="margin-left: 5px; cursor: help;">ⓘ</span>
        <div class="tooltip-text" style="display: none; position: absolute; background: #333; color: white; padding: 5px; border-radius: 3px;">
          CB is generated by using VE. Using CB to deal damage restores HP. Max CB is 75% of max HP.
        </div>
      </div>
    `;

    // Add CSS for animations
    const style = `
      <style>
        @keyframes glow {
          0% { box-shadow: 0 0 10px #FFD700; }
          50% { box-shadow: 0 0 20px #FFD700; }
          100% { box-shadow: 0 0 10px #FFD700; }
        }
        @keyframes twinkle {
          0% { background-position: 0% 50%; }
          50% { background-position: 100% 50%; }
          100% { background-position: 0% 50%; }
        }
        .bar-fill[style*="twinkle"] {
          background: linear-gradient(90deg, #1E90FF, #87CEEB, #1E90FF) !important;
          background-size: 200% 100%;
        }
        .resource-bar:hover .tooltip-text {
          display: block;
        }
      </style>
    `;

    // Inject the bars into the header
    const header = html.find(".sheet-header");
    header.append(veBar + cbBar + style);

    // Add click handler for VE bar to adjust value
    html.find(".ve-bar .bar-container").click(async () => {
      const newValue = await Dialog.prompt({
        title: "Adjust Vital Energy",
        content: `<p>Enter new VE value (0-${maxVE}):</p><input type="number" name="ve-value" value="${currentVE}" min="0" max="${maxVE}" />`,
        callback: (html) => html.find('input[name="ve-value"]').val(),
      });
      if (newValue !== null) {
        await actor.update({
          "system.resources.vitalEnergy.value": parseInt(newValue),
        });
        sheet.render();
      }
    });
  });
}
